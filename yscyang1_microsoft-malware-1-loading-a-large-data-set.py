import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
# Too slow.  Need optimize dtypes first
# chunksize = 100000
# chunks = []
# for chunk in pd.read_csv('../input/train.csv', chunksize=chunksize, low_memory=False):
#     chunks.append(chunk)
# df = pd.concat(chunks, axis=0)
subset = pd.read_csv('../input/train.csv', chunksize=10000)
type(subset)
subset_df= pd.DataFrame(subset.get_chunk(10000))
subset_df.head()
subset_df.info(memory_usage='deep')
for dtype in ['float64', 'int64', 'object']:
    print('Average memory usage for {}: {} MB'.format(dtype, format(subset_df.select_dtypes([dtype]).memory_usage(deep = True).mean()/1024**2,'.2f')))
def get_memoryUsage(df):
    dtype_lst = list(df.get_dtype_counts().index)
    for dtype in dtype_lst:
        print('Total memory usage for {}: {} MB'.format(dtype, format(df.select_dtypes([dtype]).memory_usage(deep = True).sum()/1024**2,'.5f')))
    
    print('\n' + 'Total Memory Usage: {} MB'.format(format(df.memory_usage(deep=True).sum()/1024**2, '.2f')))
get_memoryUsage(subset_df)
def downcast_Numeric(df):
    for col in df.select_dtypes(['int64']):
        df[col] = pd.to_numeric(df[col], downcast = 'unsigned')
    for col in df.select_dtypes(['float64']):
        df[col] = pd.to_numeric(df[col], downcast = 'float')
downcast_Numeric(subset_df)
get_memoryUsage(subset_df)
subset_df.select_dtypes(['object']).describe()
def downcast_Obj(df):
    for col in df.select_dtypes(['object']):
        if df[col].nunique() < len(df[col])/2:
            df[col] = df[col].astype('category')
downcast_Obj(subset_df)
subset_df.info(memory_usage='deep')
get_memoryUsage(subset_df)
dtype_dict = {}
for col in subset_df.columns:
    dtype_dict[col] = subset_df[col].dtypes
    
dtype_dict['GeoNameIdentifier']= np.dtype(np.float32)
train_df = pd.read_csv('../input/train.csv', dtype=dtype_dict)
get_memoryUsage(train_df)
test_df = pd.read_csv('../input/test.csv', dtype = dtype_dict)
get_memoryUsage(test_df)
